class Cuboid {
    int width;
    int length;
    int height;

    Cuboid(int width, int length, int height) {
        this.width = width;
        this.length = length;
        this.height = height;
    }
}

class Solution {
    private boolean checkCondition(Cuboid currCuboid, Cuboid tempCuboid) {
        List<Integer> currList = new ArrayList<Integer>(){{
            add(currCuboid.width);
            add(currCuboid.length);
            add(currCuboid.height);
        }}.stream().sorted().collect(Collectors.toList());

        List<Integer> tempList = new ArrayList<Integer>(){{
            add(currCuboid.width);
            add(currCuboid.length);
            add(currCuboid.height);
        }}.stream().sorted().collect(Collectors.toList());

        if(currList.get(0) >= tempList.get(0) && currList.get(1) >= tempList.get(1) && currList.get(2) >= tempList.get(2)) {
            return true;
        }

        return false;
    }

    public int maxHeight(int[][] cuboids) {
        int n = cuboids.length;
        int maxAns = 0;

        List<Cuboid> cuboidList = new ArrayList<>();

        for(int i = 0; i < n; i++) {
            cuboidList.add(new Cuboid(cuboids[i][0], cuboids[i][1], cuboids[i][2]));
        }

        List<Cuboid> sortedWidthCuboids = cuboidList
            .stream()
            .sorted(Comparator.comparingInt(a -> a.width))
            .collect(Collectors.toList());

        // sortedCuboids.stream().forEach(a -> System.out.println(a.width));

        int[] dpWidth = new int[n];
        Arrays.fill(dpWidth, 0);
        dpWidth[0] = sortedWidthCuboids.get(0).width;

        for(int i = 1; i < n; i++) {
            Cuboid currCuboid = sortedWidthCuboids.get(i);
            dpWidth[i] = currCuboid.width;

            for(int j = 0; j < i; j++) {
                Cuboid tempCuboid = sortedWidthCuboids.get(j);

                if(checkCondition(currCuboid, tempCuboid)) {
                    dpWidth[i] = Integer.max(dpWidth[i], currCuboid.width + dpWidth[j]);

                }
                // System.out.println("test dp[i] " + i + " " + dp[i] + " " + dp[j] + " " + currCuboid.width);

            }
            // System.out.println("test " + i + " " + Arrays.toString(dp));

        }

        // System.out.println(Arrays.toString(dp));
        maxAns = dpWidth[n - 1];

        List<Cuboid> sortedHeightCuboids = cuboidList
            .stream()
            .sorted(Comparator.comparingInt(a -> a.height))
            .collect(Collectors.toList());

        // sortedCuboids.stream().forEach(a -> System.out.println(a.width));

        int[] dpHeight = new int[n];
        Arrays.fill(dpHeight, 0);
        dpHeight[0] = sortedHeightCuboids.get(0).height;

        for(int i = 1; i < n; i++) {
            Cuboid currCuboid = sortedHeightCuboids.get(i);
            dpHeight[i] = currCuboid.height;

            for(int j = 0; j < i; j++) {
                Cuboid tempCuboid = sortedHeightCuboids.get(j);

                if(checkCondition(currCuboid, tempCuboid)) {
                    dpHeight[i] = Integer.max(dpHeight[i], currCuboid.height + dpHeight[j]);

                }
                // System.out.println("test dp[i] " + i + " " + dp[i] + " " + dp[j] + " " + currCuboid.width);

            }
            // System.out.println("test " + i + " " + Arrays.toString(dp));

        }

        // System.out.println(Arrays.toString(dp));
        maxAns = Integer.max(maxAns, dpHeight[n - 1]);

        List<Cuboid> sortedLengthCuboids = cuboidList
            .stream()
            .sorted(Comparator.comparingInt(a -> a.length))
            .collect(Collectors.toList());

        // sortedCuboids.stream().forEach(a -> System.out.println(a.width));

        int[] dpLength = new int[n];
        Arrays.fill(dpLength, 0);
        dpLength[0] = sortedLengthCuboids.get(0).length;

        for(int i = 1; i < n; i++) {
            Cuboid currCuboid = sortedLengthCuboids.get(i);
            dpLength[i] = currCuboid.length;

            for(int j = 0; j < i; j++) {
                Cuboid tempCuboid = sortedLengthCuboids.get(j);

                if(checkCondition(currCuboid, tempCuboid)) {
                    dpLength[i] = Integer.max(dpLength[i], currCuboid.length + dpLength[j]);

                }
                // System.out.println("test dp[i] " + i + " " + dp[i] + " " + dp[j] + " " + currCuboid.width);

            }
            // System.out.println("test " + i + " " + Arrays.toString(dp));

        }

        // System.out.println(Arrays.toString(dp));
        maxAns = Integer.max(maxAns, dpLength[n - 1]);

        return maxAns;
    }
}


//////////////

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class HeadTailPair {
    TreeNode head;
    TreeNode tail;

    HeadTailPair(TreeNode head, TreeNode tail) {
        this.head = head;
        this.tail = tail;
    }
}

class Solution {

    private HeadTailPair flattenTree(TreeNode root) {
        HeadTailPair htPair = new HeadTailPair(null, null);

        if(root == null) {
            return htPair;
        }

        if(root.left == null && root.right == null) {
            htPair.head = htPair.tail = root;
        } else if(root.left != null && root.right == null) {
            HeadTailPair leftPair = flattenTree(root.left);
            leftPair.tail.right = root;
            root.left = null;

            htPair.head = leftPair.head;
            htPair.tail = root;
        } else if(root.left == null && root.right != null) {
            HeadTailPair rightPair = flattenTree(root.right);
            root.right = rightPair.head;
            root.left = null;

            htPair.head = root;
            htPair.tail = rightPair.tail;
        } else {
            HeadTailPair leftPair = flattenTree(root.left);
            HeadTailPair rightPair = flattenTree(root.right);

            leftPair.tail.right = root;
            root.right = rightPair.head;
            root.left = null;

            htPair.head = leftPair.head;
            htPair.tail = rightPair.tail;
        }

        return htPair;
    }

    public void flatten(TreeNode root) {
        root = flattenTree(root).head;
    }
}

///////

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {


    public void flatten(TreeNode root) {
        if(root == null) {
            return;
        }

        if(root.left == null && root.right == null) {
            return;
        } else if(root.left == null && root.right != null) {
            return;
        } else if(root.left != null && root.right == null) {
            root.right = root.left;
        } else if(root.left == null && root.right == null) {
            TreeNode temp = root.right;
            root.right = root.left;
            root.right.right = temp;
        }

        flatten(root.left);
        flatten(root.right);
    }
}


/////////////////////////////////////////// graph - snakes and ladders

https://leetcode.com/problems/snakes-and-ladders/


class Graph{
    int noOfVertex;
    ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

    public Graph(int noOfVertex) {
        this.noOfVertex = noOfVertex;

        for(int i = 0; i <= noOfVertex * noOfVertex; i++) {
            this.adj.add(new ArrayList<>());
        }
    }

    public void addEdge(int v, int u) {
        adj.get(v).add(u);
    }

    public int getShortedPath(int src, int dist) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(src);
        boolean[] isVisited = new boolean[noOfVertex * noOfVertex + 1];
        Arrays.fill(isVisited, false);

        int[] distance = new int[noOfVertex * noOfVertex + 1];
        Arrays.fill(distance, -1);
        distance[src] = 0;

        while(!queue.isEmpty()) {
            int curr = queue.poll();

            for(Integer nbr: adj.get(curr)) {
                if(!isVisited[curr]) {
                    queue.add(nbr);
                    distance[nbr] = distance[curr] + 1;
                    isVisited[nbr] = true;
                }
            }
        }

        return distance[dist];
    }

    public void printGraph() {
        for(ArrayList<Integer> adjList : adj) {
            System.out.print("head");
            for(Integer vertex : adjList) {
                System.out.print("->" + vertex);
            }
            System.out.println();
        }
    }
}

class Solution {

    public int snakesAndLadders(int[][] board) {
        int n = board[0].length;
        int grid = 1;

        Graph graph = new Graph(n);

        for(int i = n, k = 1; i >= 0; i--, k++) {
            int dice = 1;
            for(int j = 1; j <= n; j++) {
                int y = (dice + j) % 6;
                if(y == 0) {
                    y = 6;
                }

                int x = (n + (dice + j) / 7);
                if(x > n || (grid + dice > n * n)) {
                    break;
                }

                if(board[x - 1][y - 1] == -1) {
                    graph.addEdge(grid, grid + dice);
                } else {
                    graph.addEdge(grid, board[x - 1][y - 1]);
                }
                grid++;
                dice++;
            }
        }

        graph.printGraph();

        return graph.getShortedPath(1, n * n);
    }
}

/////////////////////////////////////////////////////////////

  public int dijkstra(int source, int dist) {
        int[] distance = new int[noOfVertex];
        Set<Node> set = new HashSet<>();
        Queue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(node -> node.weight));
        Arrays.fill(distance, Integer.MAX_VALUE);

        distance[source] = 0;
        pq.add(new Node(source, 0));

        while(!pq.isEmpty()) {
            Node curr = pq.poll();

            for(Node nbr : adj.get(curr.node)) {
                if(curr.weight + nbr.weight < distance[nbr.node]) {
                    distance[nbr.node] = curr.weight + nbr.weight;

                    if(pq.)
                }
            }
        }

        return distance[dist];
    }

   /////////////////////